{
    "js":{
       "healthController":"exports.health = ctx => {\n\tctx.body = { status: \"200\",message: \"success\" };\n};",
       "index":"require(\"dotenv\").config();\nconst variables = require(\"./variables/index\");\nconst koa = require(\"koa\");\nconst koaBody = require(\"koa-body\");\nconst router = require(\"./routes\");\nconst app = new koa();\n\napp.use(koaBody());\napp.use(router.routes());\n\napp.listen(variables.appPort, () => {\n\t console.log(\n\t\t `>>>>>>>>>Listening on ${variables.appHost}:${variables.appPort}, in ${variables.env}`\n\t );\n\t console.log(\n\t\t `>>>>>>>>>Check response ( http://${variables.appHost}:${variables.appPort}/health )`\n\t );\n});",
       "route":"const router = require(\"koa-router\");\nconst healthController = require(\"./controllers/healthController\");\nconst routes = new router();\nroutes.get(\"/health\", healthController.health);\nmodule.exports = routes;",
       "varIndex":"const appPort = process.env.APP_PORT;\nconst appHost = process.env.APP_HOST || \"localhost\";\nconst env = process.env.APP_ENV;\n\nconst variables = {\n\tappPort,\n\tappHost,\n\tenv,\n};\n\nmodule.exports = variables;"
    },
    "ts":{
       "tsconfig":"{\n\t \"compilerOptions\": {\n\t /* Visit https://aka.ms/tsconfig to read more about this file */\n\n\t /* Projects */\n\t // \"incremental\": true, /* Save .tsbuildinfo files to allow for incremental compilation of projects. */\n\t // \"composite\": true, /* Enable constraints that allow a TypeScript project to be used with project references. */\n\t // \"tsBuildInfoFile\": \"./.tsbuildinfo\", /* Specify the path to .tsbuildinfo incremental compilation file. */\n\t // \"disableSourceOfProjectReferenceRedirect\": true, /* Disable preferring source files instead of declaration files when referencing composite projects. */\n\t // \"disableSolutionSearching\": true, /* Opt a project out of multi-project reference checking when editing. */\n\t // \"disableReferencedProjectLoad\": true, /* Reduce the number of projects loaded automatically by TypeScript. */\n\n\t /* Language and Environment */\n\t \"target\": \"es6\" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,\n\t // \"lib\": [], /* Specify a set of bundled library declaration files that describe the target runtime environment. */\n\t // \"jsx\": \"preserve\", /* Specify what JSX code is generated. */\n\t // \"experimentalDecorators\": true, /* Enable experimental support for TC39 stage 2 draft decorators. */\n\t // \"emitDecoratorMetadata\": true, /* Emit design-type metadata for decorated declarations in source files. */\n\t // \"jsxFactory\": \"\", /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */\n\t // \"jsxFragmentFactory\": \"\", /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */\n\t // \"jsxImportSource\": \"\", /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */\n\t // \"reactNamespace\": \"\", /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */\n\t // \"noLib\": true, /* Disable including any library files, including the default lib.d.ts. */\n\t // \"useDefineForClassFields\": true, /* Emit ECMAScript-standard-compliant class fields. */\n\t // \"moduleDetection\": \"auto\", /* Control what method is used to detect module-format JS files. */\n\n\t /* Modules */\n\t \"module\": \"commonjs\" /* Specify what module code is generated. */,\n\t // \"rootDir\": \"./\", /* Specify the root folder within your source files. */\n\t // \"moduleResolution\": \"node\", /* Specify how TypeScript looks up a file from a given module specifier. */\n\t // \"baseUrl\": \"./\", /* Specify the base directory to resolve non-relative module names. */\n\t // \"paths\": {}, /* Specify a set of entries that re-map imports to additional lookup locations. */\n\t // \"rootDirs\": [], /* Allow multiple folders to be treated as one when resolving modules. */\n\t // \"typeRoots\": [], /* Specify multiple folders that act like './node_modules/@types'. */\n\t // \"types\": [], /* Specify type package names to be included without being referenced in a source file. */\n\t // \"allowUmdGlobalAccess\": true, /* Allow accessing UMD globals from modules. */\n\t // \"moduleSuffixes\": [], /* List of file name suffixes to search when resolving a module. */\n\t // \"resolveJsonModule\": true, /* Enable importing .json files. */\n\t // \"noResolve\": true, /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */\n\n\t /* JavaScript Support */\n\t // \"allowJs\": true, /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */\n\t // \"checkJs\": true, /* Enable error reporting in type-checked JavaScript files. */\n\t // \"maxNodeModuleJsDepth\": 1, /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */\n\n\t /* Emit */\n\t // \"declaration\": true, /* Generate .d.ts files from TypeScript and JavaScript files in your project. */\n\t // \"declarationMap\": true, /* Create sourcemaps for d.ts files. */\n\t // \"emitDeclarationOnly\": true, /* Only output d.ts files and not JavaScript files. */\n\t // \"sourceMap\": true, /* Create source map files for emitted JavaScript files. */\n\t // \"outFile\": \"./\", /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */\n\t \"outDir\": \"./dist\" /* Specify an output folder for all emitted files. */,\n\t // \"removeComments\": true, /* Disable emitting comments. */\n\t // \"noEmit\": true, /* Disable emitting files from a compilation. */\n\t // \"importHelpers\": true, /* Allow importing helper functions from tslib once per project, instead of including them per-file. */\n\t // \"importsNotUsedAsValues\": \"remove\", /* Specify emit/checking behavior for imports that are only used for types. */\n\t // \"downlevelIteration\": true, /* Emit more compliant, but verbose and less performant JavaScript for iteration. */\n\t // \"sourceRoot\": \"\", /* Specify the root path for debuggers to find the reference source code. */\n\t // \"mapRoot\": \"\", /* Specify the location where debugger should locate map files instead of generated locations. */\n\t // \"inlineSourceMap\": true, /* Include sourcemap files inside the emitted JavaScript. */\n\t // \"inlineSources\": true, /* Include source code in the sourcemaps inside the emitted JavaScript. */\n\t // \"emitBOM\": true, /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */\n\t // \"newLine\": \"crlf\", /* Set the newline character for emitting files. */\n\t // \"stripInternal\": true, /* Disable emitting declarations that have '@internal' in their JSDoc comments. */\n\t // \"noEmitHelpers\": true, /* Disable generating custom helper functions like '__extends' in compiled output. */\n\t // \"noEmitOnError\": true, /* Disable emitting files if any type checking errors are reported. */\n\t // \"preserveConstEnums\": true, /* Disable erasing 'const enum' declarations in generated code. */\n\t // \"declarationDir\": \"./\", /* Specify the output directory for generated declaration files. */\n\t // \"preserveValueImports\": true, /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */\n\n\t /* Interop Constraints */\n\t // \"isolatedModules\": true, /* Ensure that each file can be safely transpiled without relying on other imports. */\n\t // \"allowSyntheticDefaultImports\": true, /* Allow 'import x from y' when a module doesn't have a default export. */\n\t \"esModuleInterop\": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,\n\t // \"preserveSymlinks\": true, /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */\n\t \"forceConsistentCasingInFileNames\": true /* Ensure that casing is correct in imports. */,\n\n\t /* Type Checking */\n\t \"strict\": true /* Enable all strict type-checking options. */,\n\t // \"noImplicitAny\": true, /* Enable error reporting for expressions and declarations with an implied 'any' type. */\n\t // \"strictNullChecks\": true, /* When type checking, take into account 'null' and 'undefined'. */\n\t // \"strictFunctionTypes\": true, /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */\n\t // \"strictBindCallApply\": true, /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */\n\t // \"strictPropertyInitialization\": true, /* Check for class properties that are declared but not set in the constructor. */\n\t // \"noImplicitThis\": true, /* Enable error reporting when 'this' is given the type 'any'. */\n\t // \"useUnknownInCatchVariables\": true, /* Default catch clause variables as 'unknown' instead of 'any'. */\n\t // \"alwaysStrict\": true, /* Ensure 'use strict' is always emitted. */\n\t // \"noUnusedLocals\": true, /* Enable error reporting when local variables aren't read. */\n\t // \"noUnusedParameters\": true, /* Raise an error when a function parameter isn't read. */\n\t // \"exactOptionalPropertyTypes\": true, /* Interpret optional property types as written, rather than adding 'undefined'. */\n\t // \"noImplicitReturns\": true, /* Enable error reporting for codepaths that do not explicitly return in a function. */\n\t // \"noFallthroughCasesInSwitch\": true, /* Enable error reporting for fallthrough cases in switch statements. */\n\t // \"noUncheckedIndexedAccess\": true, /* Add 'undefined' to a type when accessed using an index. */\n\t // \"noImplicitOverride\": true, /* Ensure overriding members in derived classes are marked with an override modifier. */\n\t // \"noPropertyAccessFromIndexSignature\": true, /* Enforces using indexed accessors for keys declared using an indexed type. */\n\t // \"allowUnusedLabels\": true, /* Disable error reporting for unused labels. */\n\t // \"allowUnreachableCode\": true, /* Disable error reporting for unreachable code. */\n\n\t /* Completeness */\n\t // \"skipDefaultLibCheck\": true, /* Skip type checking .d.ts files that are included with TypeScript. */\n\t \"skipLibCheck\": true /* Skip type checking all .d.ts files. */\n\t }\n}",
       "route":"import router from \"koa-router\";\nimport * as healthController from \"./controllers/health\";\nconst routes = new router();\nroutes.get(\"/health\", healthController.health);\nexport default routes;\n",
       "index":"import \"dotenv/config\";\nimport variables from \"./variables\";\nimport koa from \"koa\";\nimport koaBody from \"koa-body\";\nimport router from \"./routes\";\nconst app = new koa();\n\napp.use(koaBody());\napp.use(router.routes());\napp.listen(variables.appPort, () => {\n\t console.log(\n\t\t `>>>>>>>>>Listening on ${variables.appHost}:${variables.appPort}, in ${variables.env}`\n\t );\n\t console.log(\n\t\t `>>>>>>>>>Check response ( http://${variables.appHost}:${variables.appPort}/health )`\n\t );\n});\n",
       "varIndex":"const appPort = process.env.APP_PORT || 8081;\nconst appHost = process.env.APP_HOST || \"localhost\";\nconst env = process.env.APP_ENV || \"dev\";\n\ninterface Variables {\n\t appPort: number;\n\t appHost: string;\n\t env: string;\n}\n\nconst variables : Variables = {\n\t appPort: Number(appPort),\n\t appHost: appHost,\n\t env: env\n};\n\nexport default variables;",
       "health":"export const health = (ctx: any) => {\n\t ctx.body = { status: \"200\", message: \"success\" };\n};\nexport default { health };\n"
    },
    "common":{
       "env":"# App\nAPP_ENV=local\nAPP_PORT=8081\nAPP_HOST=localhost\nSERVICE_NAME=",
       "gitignore":"# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n.pnpm-debug.log*\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Snowpack dependency directory (https://snowpack.dev/)\nweb_modules/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional stylelint cache\n.stylelintcache\n\n# Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variable files\n.env\n.env.development.local\n.env.test.local\n.env.production.local\n.env.local\n\n# parcel-bundler cache (https://parceljs.org/)\n.cache\n.parcel-cache\n\n# Next.js build output\n.next\nout\n\n# Nuxt.js build / generate output\n.nuxt\ndist\n\n# Gatsby files\n.cache/\n# Comment in the public line in if your project uses Gatsby and not Next.js\n# https://nextjs.org/blog/next-9-1#public-directory-support\n# public\n\n# vuepress build output\n.vuepress/dist\n\n# vuepress v2.x temp and cache directory\n.temp\n.cache\n\n# Docusaurus cache and generated files\n.docusaurus\n\n# Serverless directories\n.serverless/\n\n# FuseBox cache\n.fusebox/\n\n# DynamoDB Local files\n.dynamodb/\n\n# TernJS port file\n.tern-port\n\n# Stores VSCode versions used for testing VSCode extensions\n.vscode-test\n\n# yarn v2\n.yarn/cache\n.yarn/unplugged\n.yarn/build-state.yml\n.yarn/install-state.gz\n.pnp.*"
    }
 }